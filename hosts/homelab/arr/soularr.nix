# Auto-generated using compose2nix v0.3.2-pre.
{
  config,
  pkgs,
  lib,
  ...
}: {
  sops.secrets."misc/soulseek" = {sopsFile = ../../../users/secrets.yaml;};

  services.slskd = {
    enable = true;
    openFirewall = true;
    environmentFile = config.sops.secrets."misc/soulseek".path;
    settings = {
      directories = {
        incomplete = "/mnt/Download";
        downloads = "/mnt/Download/Music";
      };
      shares.directories = [
        "/mnt/Music"
      ];
      remote_file_management = true;
    };
    domain = "slskd.gladiusso.com";
  };

  systemd.tmpfiles.rules = [
    "d /var/soularr 0750 1000 1000"
  ];

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."soularr" = {
    image = "mrusse08/soularr:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "SCRIPT_INTERVAL" = "300";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/var/soularr:/data:rw"
      "/mnt/Download/Music:/downloads:rw"
    ];
    user = "1000:1000";
    log-driver = "journald";
    extraOptions = [
      "--hostname=soularr"
      "--network-alias=soularr"
      "--network=soularr_default"
      "-it"
    ];
  };
  systemd.services."docker-soularr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-soularr_default.service"
    ];
    requires = [
      "docker-network-soularr_default.service"
    ];
    partOf = [
      "docker-compose-soularr-root.target"
    ];
    wantedBy = [
      "docker-compose-soularr-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-soularr_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f soularr_default";
    };
    script = ''
      docker network inspect soularr_default || docker network create soularr_default
    '';
    partOf = ["docker-compose-soularr-root.target"];
    wantedBy = ["docker-compose-soularr-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-soularr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
